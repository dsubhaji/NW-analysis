axis(side=2, at=seq(0,1,by=0.01))
axis(side=2, at=seq(0,1,by=0.001))
axis(side=2, at=seq(0,1,by=0.01))
plot(V2,V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n",type="b")
axis(side=1, at=seq(0,1,by=0.23))
axis(side=1, at=seq(0,1,by=0.03))
axis(side=2, at=seq(0,1,by=0.01))
plot(V2,V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n",type="b",col="green")
plot(V2,V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n",type="b",col="blue")
axis(side=1, at=seq(0,1,by=0.03))
axis(side=2, at=seq(0,1,by=0.01))
new<subset(cluster,cluster.$V2 >0.3)
new<-subset(cluster,cluster.$V2 >0.3)
new<-subset(cluster,V2 >0.3)
new
new<-subset(cluster,V2 in (0.3:0.6))
new<-subset(cluster,V2 =0.3:0.6)
new
new<-subset(cluster,V2 >0.3)
new
plot(V2,V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n",type="b",col="green")
plot(new.V2,new.V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n",type="b",col="green")
new<-subset(cluster,V2 >0.3)
new
new<-subset(cluster,V2 =c(0.3:0.6))
new
new<-subset(cluster,V2 =at(0.3:0.6))
new
new<-subset(cluster,V2=c(0.3:0.6))
library("sqldf", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
DF4 <- read.csv.sql("/home/manishjain/cluster.csv", sql = 'select * from file where V2>0.3 and V2 <0.6')
DF4 <- read.csv.sql("/home/manishjain/cluster.csv")
DF4
DF4 <- read.csv.sql("/home/manishjain/cluster.csv", sql = 'select * from file where V2>0.3 and V2 <0.6')
new<-subset(cluster,V2=c(0.3:0.6))
new<-subset(cluster,V2 >0.3)
new
new<-subset(cluster,V2 >=0.3 , V2<=0.6)
new
new<-subset(cluster,V2 >=0.3 and V2<=0.6)
new<-subset(cluster,V2 >=0.3 & V2<=0.6)
new
typeof(new)
plot(new.V2,new.V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n",type="b",col="green")
plot(V2,V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n",type="b",col="green")
new
plot(new)
plot(new, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n",type="b",col="green")
axis(side=1, at=seq(0,1,by=0.03))
library("shiny", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
runApp("shiny_growth")
runApp("shiny_growth")
runExample("03_reactivity")
runApp("shiny_growth")
runApp("shiny_growth")
runApp("shiny_growth")
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
new
cluster
source('~/plotting.R')
new
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
new
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/.active-rstudio-document')
source('~/plotting.R')
cluster<-read.table("~/cluster.csv",sep=";",quote="\"")
#min <-readline(prompt="Enter The Minimum value ")
#max <-readline(prompt="Enter The Max Value: ")
#sep <-readline(prompt="Enter The Seperation ")
#new <- subset(cluster, V2 >=min & V2<=max)
{
plot(cluster, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
axis(side=1, at=seq(0,1,by=0.1))
axis(side=2, at=seq(0,1,by=0.1))
plot(V2,V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
axis(side=1, at=seq(0,1,by=0.1))
axis(side=2, at=seq(0,1,by=0.1))
view(cluster)
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
source('~/plotting.R')
#new <- subset(cluster, V2 >=min & V2<=max)
#new <- subset(cluster, V2 >=0.2 & V2<=0.6)
plot(new$V2,new$v1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
new
#new <- subset(cluster, V2 >=0.2 & V2<=0.6)
new
cluster
#new <- subset(cluster, V2>=0.2 & V2<=0.6)
new
cluster <- read.table("~/cluster.csv", sep=";", quote="\"")
View(cluster)
#new <- subset(cluster, V2>=0.2 & V2<=0.6)
new
new <- subset(cluster, V2>=0.2 & V2<=0.6)
new
plot(new$V2,new$v1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
axis(side=1, at=seq(0,1,by=0.03))
axis(side=2, at=seq(0,1,by=0.03))
axis(side=1, at=seq(0,1,by=0.1))
plot(new$V2,new$v1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
axis(side=2, at=seq(0,1,by=0.03))
axis(side=1, at=seq(0,1,by=0.1))
plot(new$V2,new$v1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
axis(side=2, at=seq(0,1,by=0.03))
axis(side=1, at=seq(0.2,0.6,by=0.1))
axis(side=1, at=seq(0.2,0.6,by=0.01))
library("shiny", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
runApp("shiny_growth")
new <- subset(cluster, V2>=0.2 & V2<=0.8)
new
plot(new$V2,new$V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
axis(side=1, at=seq(0.2,0.8,by=0.2))
axis(side=2, at=seq(0,1,by=0.03))
plot(new$V2,new$V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
runApp("shiny_growth")
runApp("shiny_growth", display.mode="showcase")
?axis()
plot(new$V2,new$V1, main="Growth Model Plots",xlab="Random Affilation",ylab="Clusturing Coeficient",xaxt="n",yaxt="n")
?axis()
plot(1:10, xaxt = "n")
axis(1, xaxp = c(2, 9, 7))
plot(1:10, xaxt = "n")
axis(1, xaxp = c(2, 9, 7))
axis(1, xaxp = c(2, 9, 7), lwd=2)
axis(1, xaxp = c(2, 9, 7), lwd=1)
axis(1, xaxp = c(2, 9, 7), lwd=1,lty=3)
axis(1, xaxp = c(2, 9, 7), lty=3)
plot(1:10, xaxt = "n")
axis(1, xaxp = c(2, 9, 7), lwd=1,lty=3)
install.packages("Intervals")
install.packages("intervals")
library("sqldf", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
read.csv.sql("~/cluster.csv", sql="select V2 from cluster")
read.csv.sql("~/cluster.csv", sql="select * from cluster where V2")
xx<-read.csv.sql("~/cluster.csv", sql="select * from cluster where V2")
xx
xx<-read.csv.sql("~/cluster.csv", sql="select * from cluster where V2")
xx<-read.csv.sql("~/cluster.csv", sql="select * from cluster where V2=V2*0,2")
xx<-read.csv.sql("~/cluster.csv", sql="select * from cluster where V2=V2*0.2")
xx
source('~/growth_cluster.R')
source('~/growth_cluster.R')
source('~/growth_cluster.R')
?cbind
?row.names
source('~/growth_cluster.R')
source('~/growth_cluster.R')
png("plot2.png",width=480,height=480,units="px")
barplot(
aggTotalsBaltimore$Emissions,
names.arg=aggTotalsBaltimore$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From all Baltimore City Sources"
)
dev.off()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
# Subset NEI data by Baltimore's fip.
baltimoreNEI <- NEI[NEI$fips=="24510",]
# Aggregate using sum the Baltimore emissions data by year
aggTotalsBaltimore <- aggregate(Emissions ~ year, baltimoreNEI,sum)
png("plot2.png",width=480,height=480,units="px")
barplot(
aggTotalsBaltimore$Emissions,
names.arg=aggTotalsBaltimore$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From all Baltimore City Sources"
)
dev.off()
aggTotals <- aggregate(Emissions ~ year,NEI, sum)
png("plot3.png",width=480,height=480,units="px")
library(ggplot2)
ggp <- ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +
geom_bar(stat="identity") +
theme_bw() + guides(fill=FALSE)+
facet_grid(.~type,scales = "free",space="free") +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Tons)")) +
labs(title=expression("PM"[2.5]*" Emissions, Baltimore City 1999-2008 by Source Type"))
print(ggp)
dev.off()
combustionRelated <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coalRelated <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
coalCombustion <- (combustionRelated & coalRelated)
combustionSCC <- SCC[coalCombustion,]$SCC
combustionNEI <- NEI[NEI$SCC %in% combustionSCC,]
png("plot4.png",width=480,height=480,units="px",bg="transparent")
library(ggplot2)
ggp1 <- ggplot(combustionNEI,aes(factor(year),Emissions/10^5)) +
geom_bar(stat="identity",fill="grey",width=0.75) +
theme_bw() +  guides(fill=FALSE) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Coal Combustion Source Emissions Across US from 1999-2008"))
print(ggp1)
dev.off()
vehicles <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehiclesSCC <- SCC[vehicles,]$SCC
vehiclesNEI <- NEI[NEI$SCC %in% vehiclesSCC,]
# Subset the vehicles NEI data to Baltimore's fip
baltimoreVehiclesNEI <- vehiclesNEI[vehiclesNEI$fips=="24510",]
png("plot5.png",width=480,height=480,units="px",bg="transparent")
library(ggplot2)
ggp2 <- ggplot(baltimoreVehiclesNEI,aes(factor(year),Emissions)) +
geom_bar(stat="identity",fill="grey",width=0.75) +
theme_bw() +  guides(fill=FALSE) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
print(ggp2)
dev.off()
png("plot5.png",width=480,height=480,units="px")
library(ggplot2)
ggp2 <- ggplot(baltimoreVehiclesNEI,aes(factor(year),Emissions)) +
geom_bar(stat="identity",fill="grey",width=0.75) +
theme_bw() +  guides(fill=FALSE) +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (10^5 Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore from 1999-2008"))
print(ggp2)
dev.off()
vehicles <- grepl("vehicle", SCC$SCC.Level.Two, ignore.case=TRUE)
vehiclesSCC <- SCC[vehicles,]$SCC
vehiclesNEI <- NEI[NEI$SCC %in% vehiclesSCC,]
# Subset the vehicles NEI data by each city's fip and add city name.
vehiclesBaltimoreNEI <- vehiclesNEI[vehiclesNEI$fips=="24510",]
vehiclesBaltimoreNEI$city <- "Baltimore City"
vehiclesLANEI <- vehiclesNEI[vehiclesNEI$fips=="06037",]
vehiclesLANEI$city <- "Los Angeles County"
# Combine the two subsets with city name into one data frame
bothNEI <- rbind(vehiclesBaltimoreNEI,vehiclesLANEI)
png("plot6.png",width=480,height=480,units="px")
ggp3 <- ggplot(bothNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
print(ggp3)
ggp3 <- ggplot(bothNEI, aes(x=factor(year), y=Emissions, fill=city)) +
geom_bar(aes(fill=year),stat="identity") +
facet_grid(scales="free", space="free", .~city) +
guides(fill=FALSE) + theme_bw() +
labs(x="year", y=expression("Total PM"[2.5]*" Emission (Kilo-Tons)")) +
labs(title=expression("PM"[2.5]*" Motor Vehicle Source Emissions in Baltimore & LA, 1999-2008"))
print(ggp3)
dev.off()
tot.PM25yr <- tapply(NEI$Emissions, NEI$year, sum)
###Step 2: prepare to plot to png
png("plot1.png")
plot(names(tot.PM25yr), tot.PM25yr, type="l", xlab = "Year", ylab = expression
("Total" ~ PM[2.5] ~"Emissions (tons)"), main = expression("Total US" ~
PM[2.5] ~ "Emissions by Year"), col="Purple")
dev.off()
dev.off()
baltimore <- subset (NEI, fips == "24510")
total.PM25yr <- tapply(baltimore$Emissions, baltimore$year, sum)
## Step 3: plot prepare to plot to png
png("plot2.png")
plot(names(total.PM25yr), total.PM25yr, type = "l", xlab="Year", ylab= expression("Total" ~ PM[2.5] ~ "Emissions (tons)"), main=expression("Total for Baltimore City" ~ PM[2.5] ~ "Emissions by Year"), col = "blue")
dev.off()
typePM25.year <- ddply(baltimore, .(year, type), function(x) sum(x$Emissions))
typePM25.year <- tapply(baltimore, .(year, type), function(x) sum(x$Emissions))
typePM25.year <- ddply(baltimore, .(year, type), function(x) sum(x$Emissions))
library("plyr", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
typePM25.year <- ddply(baltimore, .(year, type), function(x) sum(x$Emissions))
## Rename the col: Emissions
colnames(typePM25.year)[3] <- "Emissions"
## Step 3: prepare to plot to png
png("plot3.png")
qplot(year, Emissions, data=typePM25.year, color=type, geom ="line") + ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Emmission by source, type and year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (in tons)"))
dev.off()
coalcomb.scc <- subset(SCC, EI.Sector %in% c("Fuel Comb - Comm/Instutional - Coal",
"Fuel Comb - Electric Generation - Coal", "Fuel Comb - Industrial Boilers, ICEs -
Coal"))
## Step 3: comparisons so that we didn't ommit anything weird
coalcomb.scc1 <- subset(SCC, grepl("Comb", Short.Name) & grepl("Coal", Short.Name))
## Step 4: set the differences
dif1 <- setdiff(coalcomb.scc$SCC, coalcomb.scc1$SCC)
dif2 <- setdiff(coalcomb.scc1$SCC, coalcomb.scc$SCC)
length(dif1)
length(dif2)
coalcomb.codes <- union(coalcomb.scc$SCC, coalcomb.scc1$SCC)
length(coalcomb.codes)
## Step 5: subset again for what we want
coal.comb <- subset(NEI, SCC %in% coalcomb.codes)
##Step 6: get the PM25 values as well
coalcomb.pm25year <- ddply(coal.comb, .(year, type), function(x) sum(x$Emissions))
#rename the col
colnames(coalcomb.pm25year)[3] <- "Emissions"
##Step 7: finally plot4.png prepare to plot to png
png("plot4.png")
qplot(year, Emissions, data=coalcomb.pm25year, color=type, geom="line") + stat_summary(fun.y = "sum", fun.ymin = "sum", fun.ymax = "sum", color = "purple", aes(shape="total"), geom="line") + geom_line(aes(size="total", shape = NA)) + ggtitle(expression("Coal Combustion" ~ PM[2.5] ~ "Emissions by Source Type and Year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
dev.off()
coalcomb.pm25year <- ddply(coal.comb, .(year, type), function(x) sum(x$Emissions))
#rename the col
colnames(coalcomb.pm25year)[3] <- "Emissions"
##Step 7: finally plot4.png prepare to plot to png
png("plot4.png")
qplot(year, Emissions, data=coalcomb.pm25year, color=type, geom="line") + stat_summary(fun.y = "sum", fun.ymin = "sum", fun.ymax = "sum", color = "purple", aes(shape="total"), geom="line") + geom_line(aes(size="total", shape = NA)) + ggtitle(expression("Coal Combustion" ~ PM[2.5] ~ "Emissions by Source Type and Year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
dev.off()
mv.sourced <- unique(grep("Vehicles", SCC$EI.Sector, ignore.case = TRUE, value = TRUE))
mv.sourcec <- SCC[SCC$EI.Sector %in% mv.sourced, ]["SCC"]
#Step 2B: subset the emissions from motor vehicles from
#NEI for Baltimore, MD.
emMV.ba <- NEI[NEI$SCC %in% mv.sourcec$SCC & NEI$fips == "24510",]
# Step 3: find the emissions due to motor vehicles in Baltimore for every year
balmv.pm25yr <- ddply(emMV.ba, .(year), function(x) sum(x$Emissions))
colnames(balmv.pm25yr)[2] <- "Emissions"
# Step 4: Plot to png
png("plot5.png")
qplot(year, Emissions, data=balmv.pm25yr, geom="line") + ggtitle(expression("Baltimore City" ~ PM[2.5] ~ "Motor Vehicle Emissions by Year")) + xlab("Year") + ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
dev.off()
?plot
?qplot
library("grid", lib.loc="/usr/lib/R/library")
mv.sourced <- unique(grep("Vehicles", SCC$EI.Sector, ignore.case = TRUE, value = TRUE))
mv.sourcec <- SCC[SCC$EI.Sector %in% mv.sourced, ]["SCC"]
## Step 3A: subset our data Baltimore City
emMV.ba <- NEI[NEI$SCC %in% mv.sourcec$SCC & NEI$fips == "24510", ]
## Step 3B: subset our data Los Angeles County
emMV.LA <- NEI[NEI$SCC %in% mv.sourcec$SCC & NEI$fips == "06037", ]
## Step 3C: bind the data created in steps 3A and 3B
emMV.comb <- rbind(emMV.ba, emMV.LA)
## Step 4: Find the emmissions due to motor vehicles in
## Baltimore (city) and Los Angeles County
tmveYR.county <- aggregate (Emissions ~ fips * year, data =emMV.comb, FUN = sum )
tmveYR.county$county <- ifelse(tmveYR.county$fips == "06037", "Los Angeles", "Baltimore")
## Step 5: plotting to png
png("plot6.png", width=750)
qplot(year, Emissions, data=tmveYR.county, geom="line", color=county) + ggtitle(expression("Motor Vehicle Emission Levels" ~ PM[2.5] ~ "  from 1999 to 2008 in Los Angeles County, CA and Baltimore, MD")) + xlab("Year") + ylab(expression("Levels of" ~ PM[2.5] ~ " Emissions"))
dev.off()
StormData<-read.csv(bzfile("repdata_data_StormData.csv.bz2"))
data<-read.csv("repdata-data-StormData.csv.bz2")
data
view(data)
View(data)
data<-read.csv("repdata-data-StormData.csv.bz2")
runApp("shiny_growth")
library("shiny", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
runApp("shiny_growth")
View(data)
head(data)
q<-head(data)
View(q)
library("knitr", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
library("xtable", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
install.packages("dplyr")
install.packages("lubridate")
install.packages("gridExtra")
library("grid", lib.loc="/usr/lib/R/library")
library("gridExtra", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
library("lubridate", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
StormData<-read.csv(bzfile("repdata_data_StormData.csv.bz2"))
library(lubridate)
StormDataHealth <- subset(StormData, INJURIES != 0 | FATALITIES != 0, select = c(BGN_DATE, EVTYPE, INJURIES, FATALITIES))
StormDataHealth$YEAR <- year(strptime(StormDataHealth$BGN_DATE, "%m/%d/%Y %H:%M:%S"))
StormDataHealth$BGN_DATE <- NULL
StormDataHealth$EVTYPE <- toupper(StormDataHealth$EVTYPE)
StormDataHealth$EVTYPE <- gsub("TSTM", "THUNDERSTORM", StormDataHealth$EVTYPE)
StormDataHealth <-aggregate(cbind(INJURIES, FATALITIES) ~ YEAR + EVTYPE,
data = StormDataHealth, sum)
library(ggplot2)
library(grid)
library(gridExtra)
InjuriesByEvent <- aggregate(INJURIES~EVTYPE, data=StormDataHealth, sum)
InjuriesByEvent <- InjuriesByEvent[order(InjuriesByEvent$INJURIES,
decreasing = TRUE),]
InjuriesByEvent$EVTYPE <- factor(InjuriesByEvent$EVTYPE,
levels = InjuriesByEvent$EVTYPE)
Injuries <- ggplot(InjuriesByEvent[1:10, ],
aes(x = reorder(EVTYPE, INJURIES), y = INJURIES)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = NULL, y = "Injuries") +
coord_flip()
FatalitiesByEvent <- aggregate(FATALITIES~EVTYPE, data=StormDataHealth, sum)
FatalitiesByEvent <- FatalitiesByEvent[order(FatalitiesByEvent$FATALITIES,
decreasing = TRUE),]
FatalitiesByEvent$EVTYPE <- factor(FatalitiesByEvent$EVTYPE,
levels = FatalitiesByEvent$EVTYPE)
Fatalities <- ggplot(FatalitiesByEvent[1:10, ],
aes(x = reorder(EVTYPE, FATALITIES), y = FATALITIES)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = NULL, y = "Fatalities") +
coord_flip()
Figure1 <- grid.arrange(Injuries, Fatalities, ncol = 2,
main = "Figure 1: Events Most Harmful to Population Health")
StormDataEconomic <- subset(StormData, PROPDMG != 0 | CROPDMG != 0, select = c(BGN_DATE, EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP))
StormDataEconomic$YEAR <- year(strptime(StormDataEconomic$BGN_DATE,
"%m/%d/%Y %H:%M:%S"))
StormDataEconomic$BGN_DATE <- NULL
StormDataEconomic$EVTYPE <- toupper(StormDataEconomic$EVTYPE)
StormDataEconomic$EVTYPE <- replace(StormDataEconomic$EVTYPE,
grep("TSTM", StormDataEconomic$EVTYPE),
"THUNDERSTORM")
StormDataEconomic$PROPDMGEXP <- toupper(StormDataEconomic$PROPDMGEXP)
StormDataEconomic$CROPDMGEXP <- toupper(StormDataEconomic$CROPDMGEXP)
CleanUpDamage<-function(DMGEXP, DMG) {
DMGEXP[DMGEXP == "?" | DMGEXP == "-" | DMGEXP == ""] <- 0
DMGEXP[DMGEXP == "+"] <- 1
DMGEXP[DMGEXP == "H"] <- 100
DMGEXP[DMGEXP == "K"] <- 1000
DMGEXP[DMGEXP == "M"] <- 1000000
DMGEXP[DMGEXP == "B"] <- 1000000000
for (i in 1:length(DMGEXP)) {
if (grepl("^[0-9]$", DMGEXP[i], perl = TRUE)) {
DMGEXP[i] <- 10^as.numeric(DMGEXP[i])
}
}
DMG <- as.numeric(DMG) * as.numeric(DMGEXP)
return(DMG)
}
StormDataEconomic$PROPDMG <- CleanUpDamage(StormDataEconomic$PROPDMGEXP,
StormDataEconomic$PROPDMG)
StormDataEconomic$CROPDMG <- CleanUpDamage(StormDataEconomic$CROPDMGEXP,
StormDataEconomic$CROPDMG)
StormDataEconomic <-aggregate(cbind(PROPDMG, CROPDMG) ~ YEAR + EVTYPE,
data = StormDataEconomic, sum)
PropDmgByEvent <- aggregate(PROPDMG~EVTYPE, data=StormDataEconomic, sum)
PropDmgByEvent <- PropDmgByEvent[order(PropDmgByEvent$PROPDMG,
decreasing = TRUE),]
PropDmgByEvent$EVTYPE <- factor(PropDmgByEvent$EVTYPE,
levels = PropDmgByEvent$EVTYPE)
PropDamage <- ggplot(PropDmgByEvent[1:10, ],
aes(x = reorder(EVTYPE, PROPDMG), y = PROPDMG)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = NULL, y = "Property Damages") +
coord_flip()
CropDmgByEvent <- aggregate(CROPDMG~EVTYPE, data=StormDataEconomic, sum)
CropDmgByEvent <- CropDmgByEvent[order(CropDmgByEvent$CROPDMG,
decreasing = TRUE),]
CropDmgByEvent$EVTYPE <- factor(CropDmgByEvent$EVTYPE,
levels = CropDmgByEvent$EVTYPE)
CropDamage <- ggplot(CropDmgByEvent[1:10, ],
aes(x = reorder(EVTYPE, CROPDMG), y = CROPDMG)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = NULL, y = "Crop Damages") +
coord_flip()
Figure2 <- grid.arrange(PropDamage, CropDamage, ncol = 2,
main = "Figure 2: Events That Have The Greatest Economic Consequences")
View(Figure)
Figure1
Figure2 <- grid.arrange(PropDamage, CropDamage, ncol = 2,
main = "Figure 2: Events That Have The Greatest Economic Consequences")
library("grid", lib.loc="/usr/lib/R/library")
library("gridExtra", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
Figure2 <- grid.arrange(PropDamage, CropDamage, ncol = 2,
main = "Figure 2: Events That Have The Greatest Economic Consequences")
?render
install.packages("render")
install.packages("rmarkdown")
library("rmarkdown", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
render("stat.Rmd","Stats_inter_projec1")
render("stat.Rmd","Stats_inter_projec1.pdf")
?pandoc
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
render("stat.Rmd","Stats_inter_projec1.pdf")
library("rmarkdown", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
render("stat.Rmd","Stats_inter_projec1.pdf")
library("knitr", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
render("stat.Rmd","Stats_inter_projec1.pdf")
install.pandoc()
install.pandoc
source('~/rmd.R')
rmd.convert('stat.Rmd','pdf')
?pandoc
pandoc('stat.Rmd','pdf')
render("stat.Rmd")
pandoc('stat.Rmd','pdf')
render("stat.Rmd","Stats_inter_projec1.pdf")
pandoc('stat.Rmd','stat.pdf')
pandoc('stat.Rmd','stat1.pdf')
rmd.convert('stat.Rmd','pdf')
library("shiny", lib.loc="/home/manishjain/R/i686-pc-linux-gnu-library/3.1")
runExample("03_reactivity")
runApp("shiny_growth", display.mode="showcase")
runApp("shiny_growth", display.mode="showcase")
runExample("03_reactivity")
runExample("09_upload")
runExample("06_tabsets")
runExample("07_widgets")
runExample("06_tabsets")
runExample("09_upload")
runApp("network_analysis")
runApp("network_analysis")
shiny::runApp()
shiny::runApp()
